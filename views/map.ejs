<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
   
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>간단한 지도 표시하기</title>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=<%= ID %>"></script>
</head>
<style>
	body {margin: 0;padding: 0;}
</style>	
<body>
<div id="map" style="width:100%;height:100%;"></div>

<script>
	// var markers = []; 
	// var markerListener; 
	// var branchList;
	var defaultLat = 37;
	var defaultLong = 127;

	var markers = new Object();
	var markerListener = new Object();
	var branchListObj = new Object();

	var firstLat = <%= firstLat %>;
	var firstLong = <%= firstLong %>;
	var startDateTime = "<%= startDateTime %>";
	var endDateTime ="<%= endDateTime %>";

	var mapOptions = {
	    center: new naver.maps.LatLng(firstLat,firstLong ),
	    zoom: 16
	};
	var map = new naver.maps.Map('map', mapOptions);//지도 등록
	getBranchesInBox(map.getBounds());

	function getBranchesInBox(mapBounds){
		console.log("get In box called");
		// hidePreviousMarkers(map, markers);//이전 마커 삭제
		// branchList = [];
		// markers = [];//마커 초기화 
		// markerListener = null;//이전 마커 리스너 초기화 
		var minlat = mapBounds._sw._lat;
		var minlng = mapBounds._sw._lng;
		var maxlat = mapBounds._ne._lat;
		var maxlng = mapBounds._ne._lng;
		var url = "http://3.34.91.138:8000/api/branch/"+minlat+"/"+minlng+"/"+maxlat+"/"+maxlng+ '/' +startDateTime + '/'+endDateTime;
		if(!startDateTime || !endDateTime ){
			console.log("sth is null");
			url = "http://3.34.91.138:8000/api/branch/"+minlat+"/"+minlng+"/"+maxlat+"/"+maxlng;
		}
		jQuery.ajax({
	        url: url,
	        beforeSend: function (xhr) {
			    xhr.setRequestHeader ("Authorization", "Bearer " +  "<%= token %>");
			},
	        type: 'GET',
	        dataType:"json",
	        success: function(data) {
	            for(var key in data){
				    //console.log(attributename+": "+myobject[attributename]);
				    if(branchListObj.hasOwnProperty(key)){
						continue;
					}
					
					branchListObj[key] = data[key];
				    var position = new naver.maps.LatLng(data[key].lat, data[key].lng);
				    console.log(position);
				    var marker = new naver.maps.Marker({
				        map: map,
				        position: position,		
				        title : data[key].branchID		      
				    });
				    // markers.push(marker);
				    markers[data[key].branchID] = marker;
				    marker.setMap(map);//각각 마커 등록 
				    markerListener[data[key].branchID] = naver.maps.Event.addListener(marker, 'click', getClickHandler(data[key].branchID));
				}

	        },
	        error: function(xhr, textStatus, error){
	            Print.postMessage('error : ' + error);
	        }
	    });
	}


	var user_position = new naver.maps.LatLng(firstLat, firstLong);

	// var map = new naver.maps.Map('map', mapOptions);

	var markerOptions = {
	    position: user_position,
	    map: map
	};

	var user_marker = new naver.maps.Marker(markerOptions);

	function setCurrentLocation(lat, long) {
		firstLat = lat;
		firstLong = long;
		Print.postMessage('set location called' + lat + " / " + long);
		var new_position = new naver.maps.LatLng(lat, long);
    	user_marker.setPosition(new_position);
    	map.panTo(user_marker.getPosition());
    }

	naver.maps.Event.addListener(user_marker, 'click', function(e){
		Print.postMessage('user_marker clicked');
		map.panTo(e.coord);
	});
	naver.maps.Event.addListener(map, 'idle', function() {
		
		getBranchesInBox(map.getBounds());
	    // updateMarkers(map, markers);
	});

	// function updateMarkers(map, markers) {

	//     var mapBounds = map.getBounds();
	//     var marker, position;

	//     for (var i = 0; i < markers.length; i++) {

	//         marker = markers[i]
	//         position = marker.getPosition();

	//         if (mapBounds.hasLatLng(position)) {
	//             showMarker(map, marker);
	//         } else {
	//             hideMarker(map, marker);
	//         }
	//     }
	// }

	function goToDefault(){
		Print.postMessage('set location called' + defaultLat + " / " + defaultLong);
		map.panTo(new naver.maps.LatLng(defaultLat, defaultLong));
	}


	function goToCurrent(){
		map.panTo(user_marker.getPosition());
	}

	// function showMarker(map, marker) {

	//     if (marker.setMap()) return;
	//     marker.setMap(map);
	// }

	// function hideMarker(map, marker) {

	//     if (!marker.setMap()) return;
	//     marker.setMap(null);
	// }

	// function hidePreviousMarkers(map, markers){
	// 	for(var i = 0; i < markers.length; i++){
	// 		markers[i].setMap(null);
	// 	}
	// }

	function getClickHandler(seq) {
	    return function(e) {
	    	console.log(branchListObj[seq]);
	        // var markerInfo = branchList[seq];
	        // console.log(markers[seq].title);
	        // console.log(markerInfo);
	        Print.postMessage(JSON.stringify(branchListObj[seq]));
	    }
	}
	//Print.postMessage('Hello World being called from Javascript code');
</script>
</body>
</html>